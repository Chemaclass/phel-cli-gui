(ns phel-cli-gui-test\terminal-gui-test
  (:require phel\test :refer [deftest is]))

# Test data structures and parameter validation without calling GUI functions

(deftest test-read-input-structure
  (let [test-input {:raw "test" :hex "74657374"}]
    (is (= "test" (:raw test-input)))
    (is (= "74657374" (:hex test-input)))))

(deftest test-board-dimensions-structure
  (let [board-config {:width 10 :height 5}]
    (is (= 10 (:width board-config)))
    (is (= 5 (:height board-config)))))

(deftest test-border-style-structure
  (let [border-style {:horizontal "-" :vertical "|" :corner "+"}]
    (is (= "-" (:horizontal border-style)))
    (is (= "|" (:vertical border-style)))
    (is (= "+" (:corner border-style)))))

(deftest test-formatter-config-structure
  (let [formatter-config {:style-name "test-style"
                          :foreground "red"
                          :background "blue"
                          :options ["bold" "underscore"]}]
    (is (= "test-style" (:style-name formatter-config)))
    (is (= "red" (:foreground formatter-config)))
    (is (= "blue" (:background formatter-config)))
    (is (= ["bold" "underscore"] (:options formatter-config)))))

(deftest test-coordinates-validation
  (let [valid-coords {:x 5 :y 10}
        edge-coords {:x 0 :y 0}
        negative-coords {:x -1 :y -1}]
    (is (= 5 (:x valid-coords)))
    (is (= 10 (:y valid-coords)))
    (is (= 0 (:x edge-coords)))
    (is (= 0 (:y edge-coords)))
    (is (= -1 (:x negative-coords)))
    (is (= -1 (:y negative-coords)))))

(deftest test-text-content-types
  (let [simple-text "Hello World"
        empty-text ""
        text-with-numbers "Text with 123 numbers!"
        symbols "Symbols: @#$%^&*()"
        unicode-text "Unicode: ñáéíóú"
        newline-text "Newline\ntext"]
    (is (= "Hello World" simple-text))
    (is (= "" empty-text))
    (is (= "Text with 123 numbers!" text-with-numbers))
    (is (= "Symbols: @#$%^&*()" symbols))
    (is (= "Unicode: ñáéíóú" unicode-text))
    (is (= "Newline\ntext" newline-text))))

(deftest test-style-options
  (let [valid-styles ["bold" "underscore" "blink" "reverse" "conceal"]]
    (is (= "bold" (first valid-styles)))
    (is (= "underscore" (second valid-styles)))
    (is (= 5 (count valid-styles)))))

(deftest test-color-options
  (let [colors ["red" "green" "blue" "yellow" "white" "black"]]
    (is (= "red" (first colors)))
    (is (= "black" (last colors)))
    (is (= 6 (count colors)))))

(deftest test-border-character-sets
  (let [ascii-border {:horizontal "=" :vertical "‖" :corner "⊞"}
        unicode-border {:horizontal "─" :vertical "│" :corner "┌"}
        simple-border {:horizontal "#" :vertical "#" :corner "#"}]
    (is (= "=" (:horizontal ascii-border)))
    (is (= "─" (:horizontal unicode-border)))
    (is (= "#" (:horizontal simple-border)))))

(deftest test-input-hex-validation
  (let [empty-hex ""
        single-char-hex "61"
        multi-char-hex "48656c6c6f"]
    (is (= 0 (php/strlen empty-hex)))
    (is (= 2 (php/strlen single-char-hex)))
    (is (= 10 (php/strlen multi-char-hex)))))

(deftest test-dimension-calculations
  (let [small-board {:width 3 :height 3}
        medium-board {:width 10 :height 5}
        large-board {:width 50 :height 20}]
    (is (= 9 (* (:width small-board) (:height small-board))))
    (is (= 50 (* (:width medium-board) (:height medium-board))))
    (is (= 1000 (* (:width large-board) (:height large-board))))))

(deftest test-coordinate-boundaries
  (let [top-left {:x 0 :y 0}
        bottom-right {:x 999 :y 999}
        out-of-bounds {:x -1 :y -1}]
    (is (>= (:x top-left) 0))
    (is (>= (:y top-left) 0))
    (is (< (:x bottom-right) 1000))
    (is (< (:y bottom-right) 1000))
    (is (< (:x out-of-bounds) 0))
    (is (< (:y out-of-bounds) 0))))

(deftest test-option-array-validation
  (let [empty-options []
        single-option ["bold"]
        multiple-options ["bold" "underscore" "blink"]]
    (is (= 0 (count empty-options)))
    (is (= 1 (count single-option)))
    (is (= 3 (count multiple-options)))
    (is (= "bold" (first single-option)))
    (is (= "blink" (last multiple-options)))))

(deftest test-string-content-validation
  (let [ascii-string "Hello"
        unicode-string "Héllo"
        special-chars "\t\n\r"
        mixed-content "Hello 123 @#$"]
    (is (= 5 (php/strlen ascii-string)))
    (is (= 6 (php/strlen unicode-string)))
    (is (= 3 (php/strlen special-chars)))
    (is (php/str_contains mixed-content "Hello"))
    (is (php/str_contains mixed-content "123"))
    (is (php/str_contains mixed-content "@#$"))))

(deftest test-configuration-merging
  (let [default-config {:width 10 :height 5}
        user-config {:width 20}
        merged-config (merge default-config user-config)]
    (is (= 20 (:width merged-config)))
    (is (= 5 (:height merged-config)))))

(deftest test-nil-handling
  (let [valid-value "test"
        nil-value nil
        empty-string ""]
    (is (= "test" valid-value))
    (is (nil? nil-value))
    (is (= "" empty-string))))

(deftest test-empty-string-handling
  (let [empty-string ""]
    (is (= 0 (php/strlen empty-string)))
    (is (= "" empty-string))))

(deftest test-format-string-construction
  (let [template "# Raw input: `%s`, hex: `%s`"
        formatted (format template "a" "61")]
    (is (php/str_contains formatted "Raw input: `a`"))
    (is (php/str_contains formatted "hex: `61`"))
    (is (php/str_contains template "%s"))))

(deftest test-character-encoding-examples
  (let [char-map {"a" "61" "A" "41" " " "20" "0" "30" "9" "39"}]
    (is (= "61" (get char-map "a")))
    (is (= "41" (get char-map "A")))
    (is (= "20" (get char-map " ")))
    (is (= "30" (get char-map "0")))
    (is (= "39" (get char-map "9")))))

(deftest test-board-area-calculation
  (let [calculate-area (fn [board] (* (:width board) (:height board)))]
    (is (= 25 (calculate-area {:width 5 :height 5})))
    (is (= 50 (calculate-area {:width 10 :height 5})))
    (is (= 0 (calculate-area {:width 0 :height 10})))
    (is (= 0 (calculate-area {:width 10 :height 0})))))

(deftest test-coordinate-normalization
  (let [normalize-coord (fn [coord] (max 0 coord))]
    (is (= 0 (normalize-coord -5)))
    (is (= 0 (normalize-coord 0)))
    (is (= 10 (normalize-coord 10)))
    (is (= 100 (normalize-coord 100)))))