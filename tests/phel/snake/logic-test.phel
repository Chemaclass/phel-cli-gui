(ns phel-cli-gui-tests\snake\logic-test
  (:require phel-cli-gui\snake\logic :refer [snake-reach-goal?
                                             move-snake
                                             collision-with-board?])
  (:require phel\test :refer [deftest is]))

(deftest test-move-snake
  (let [snake {:head {:x 1 :y 1} :direction :up}]
    (is (= {:head {:x 1 :y 0} :direction :up} (move-snake snake nil)))
    (is (= {:head {:x 0 :y 1} :direction :left} (move-snake snake :left)))
    (is (= {:head {:x 2 :y 1} :direction :right} (move-snake snake :right)))
    (is (= {:head {:x 1 :y 0} :direction :up} (move-snake snake :up)))
    (is (= {:head {:x 1 :y 2} :direction :down} (move-snake snake :down)))))

(deftest test-snake-reach-goal?
  (let [goal {:x 2 :y 2}]
    (is (false? (snake-reach-goal? {:head {:x 1 :y 1}} goal)))
    (is (true? (snake-reach-goal? {:head {:x 2 :y 2}} goal)))))

(deftest test-collision-with-board?
  (let [limit 10
        board {:width limit :height limit}]
    (is (false? (collision-with-board? {:head {:x 5 :y 5}} board)))
    (is (true? (collision-with-board? {:head {:x 5 :y 0}} board)) "collision on top")
    (is (true? (collision-with-board? {:head {:x 5 :y limit}} board)) "collision on right")
    (is (true? (collision-with-board? {:head {:x limit :y 5}} board)) "collision on bottom")
    (is (true? (collision-with-board? {:head {:x 0 :y 5}} board)) "collision on left")))
