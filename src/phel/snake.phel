(ns phel-cli-gui\snake
  (:require phel-cli-gui\terminal-gui :refer [clear-screen
                                              render-board
                                              render
                                              input-stream])

  (:require phel-cli-gui\snake\logic :refer [generate-new-goal
                                             directions
                                             move-snake
                                             snake-reach-goal?
                                             update-goal
                                             check-game-over-collisions]))

(def nano-seconds-delay 50000)
(def max-width 40)
(def max-height 20)

(defn render-snake [snake]
  (render (get-in snake [:head :x]) (get-in snake [:head :y]) "X")
  (for [t :in (snake :tail)]
    (render (t :x) (t :y) "x")))

(defn render-goal [goal]
  (render (goal :x) (goal :y) "A"))

(defn debug-snake [snake]
  (render 0 (+ max-height 3) (php/str_repeat " " 100)) # clean the line
  (render 0 (+ max-height 3) (str (php/time) " - snake" snake)))

(defn main []
  (loop [snake {:head {:x 1 :y 1}
                :tail []
                :direction :right
                :points 0}
         goal (generate-new-goal max-width max-height)]
    (php/usleep nano-seconds-delay)

    (render-board max-width max-height)

    (let [raw-in (php/fread input-stream 3)
          in (php/bin2hex raw-in)
          next-direction (directions in)
          updated-snake (move-snake snake next-direction)
          new-goal? (snake-reach-goal? snake goal)
          updated-goal (update-goal snake goal max-width max-height)]

      (check-game-over-collisions snake)

      (debug-snake updated-snake)

      (render-snake updated-snake)
      (render-goal updated-goal)

      (recur
       (if (id goal updated-goal)
         updated-snake
         (update-in updated-snake [:points] inc))
       updated-goal))))

(clear-screen)
(main)
