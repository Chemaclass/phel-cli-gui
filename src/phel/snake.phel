(ns phel-cli-gui\snake
  (:require phel-cli-gui\terminal-gui :refer [clear-screen
                                              render-board
                                              render
                                              input-stream])

  (:require phel-cli-gui\snake\logic :refer [generate-new-goal
                                             normalize-next-direction
                                             move-snake
                                             snake-reach-goal?
                                             update-goal
                                             collision-with-board?
                                             grow-snake]))

(def nano-seconds-delay 250000)
(def board {:width 30 :height 10})
(def goal-icon "A")
(def snake-head-icon "X")
(def snake-tail-icon "x")

(defn sleeping-delay [snake]
  (let [velocity (* (snake :points) 15000)
        nano-sec (- nano-seconds-delay velocity)]
    (render 0 (inc (board :height)) (format "Level: %d" (snake :points)))
    (php/usleep nano-sec)))

(defn render-snake [snake]
  (render (get-in snake [:head :x]) (get-in snake [:head :y]) snake-head-icon)
  (for [t :in (snake :tail)]
    (render (t :x) (t :y) snake-tail-icon)))

(defn render-goal [goal]
  (render 0 (+ 3 (board :height)) (str goal)) # for testing
  (render (goal :x) (goal :y) goal-icon))

(defn render-game-over [snake]
  (let [game-over-text "GAME OVER"
        game-over-text-len (php/strlen game-over-text)
        x-center (- (/ (board :width) 2) (/ game-over-text-len 2))
        y-center (/ (board :height) 2)]
    (render x-center y-center game-over-text)
    (render x-center (inc y-center) (format "Points: %d" (snake :points)))
    (php/die "So much fun!\n")))

(defn debug-snake [snake]
  (render 0 (+ 2 (board :height)) (php/str_repeat " " 100)) # clean the line
  (render 0 (+ 2 (board :height)) (str (php/time) " - snake" snake)))

(defn main []
  (loop [snake {:head {:x 2 :y 2}
                :tail []
                :direction :right
                :points 0}
         goal (generate-new-goal board)]

    (sleeping-delay snake)
    (render-board board)

    (let [in (php/bin2hex (php/fread input-stream 3))
          next-direction (normalize-next-direction in)
          updated-snake (move-snake snake next-direction)
          new-goal? (snake-reach-goal? snake goal)
          updated-goal (update-goal snake goal board)]

      (if (collision-with-board? snake board) (render-game-over snake))

      (debug-snake updated-snake)

      (render-snake updated-snake)
      (render-goal updated-goal)

      (let [new-goal (not= goal updated-goal)
            sn (if new-goal
                 (update-in updated-snake [:points] inc)
                 updated-snake)
            sn2 (if new-goal (grow-snake sn) sn)]
        (recur sn2 updated-goal)))))

(clear-screen)
(main)
